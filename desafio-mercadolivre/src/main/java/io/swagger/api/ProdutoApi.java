/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Produto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-04T23:03:30.111Z")

@Api(value = "produto", description = "the produto API")
public interface ProdutoApi {
	
    @ApiOperation(value = "Exclui o produto", nickname = "excluiProduto", notes = "Exclui o produto existente.", authorizations = {
            @Authorization(value = "BasicAuth")
        }, tags={ "Produto", })
        @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "Exclusão efetuada com sucesso"),
            @ApiResponse(code = 400, message = "Requisição inválida."),
            @ApiResponse(code = 401, message = "Requisição não autorizada."),
            @ApiResponse(code = 404, message = "Registro não encontrado."),
            @ApiResponse(code = 500, message = "Erro interno do servidor.") })
        @RequestMapping(value = "/produto/{codigoProduto}", 
            produces = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<Void> excluiProduto(@ApiParam(value = "",required=true) @PathVariable("codigoProduto") String codigoProduto);


    @ApiOperation(value = "Altera o produto", nickname = "alteraProduto", notes = "Altera os dados do produto.", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Alteração efeturada com sucesso!"),
        @ApiResponse(code = 400, message = "Requisição inválida."),
        @ApiResponse(code = 401, message = "Requisição não autorizada."),
        @ApiResponse(code = 404, message = "Registro não encontrado."),
        @ApiResponse(code = 500, message = "Erro interno do servidor.") })
    @RequestMapping(value = "/produto/{codigoProduto}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> alteraProduto(@ApiParam(value = "",required=true) @PathVariable("codigoProduto") String codigoProduto,@ApiParam(value = ""  )  @Valid @RequestBody Produto produto_);


    @ApiOperation(value = "Cadastra Produto", nickname = "cadastraProduto", notes = "Cadastra um novo produto", response = Produto.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Cadastro efetuado com sucesso", response = Produto.class),
        @ApiResponse(code = 400, message = "Requisicao invalida"),
        @ApiResponse(code = 500, message = "Erro interno do servidor") })
    @RequestMapping(value = "/produto",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Produto> cadastraProduto(@ApiParam(value = ""  )  @Valid @RequestBody Produto produto_);


    @ApiOperation(value = "Consulta Produto", nickname = "consultaProduto", notes = "Consulta o cadastro de todos os produto.", response = Produto.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Produto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Consulta cadastro de produto efetuada com sucesso", response = Produto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Requisicao invalida"),
        @ApiResponse(code = 500, message = "Erro interno do servidor") })
    @RequestMapping(value = "/produto",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Produto>> consultaProduto();

}
